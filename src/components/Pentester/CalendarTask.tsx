import { useState } from "react";
import {
  Calendar,
  Modal,
  Card,
  Tag,
  Button,
  Space,
  Typography,
  Alert,
  Input,
} from "antd";
import dayjs, { Dayjs } from "dayjs";
import { useQuery } from "@tanstack/react-query";
import {
  acceptVulnerabilities,
  getAssignedTasks,
  rejectVulnerabilities,
} from "../../services/pentester-api";
import { toast } from "sonner";

const { Text } = Typography;

export default function TaskManagement({setTriggerUpdateTask}: {setTriggerUpdateTask: React.Dispatch<React.SetStateAction<boolean>>}) {
  const [selectedDate, setSelectedDate] = useState<Dayjs | null>();
  const [modalVisible, setModalVisible] = useState(false);
  const [rejectReasonVisible, setRejectReasonVisible] = useState(false); // reject modal
  const [rejectReason, setRejectReason] = useState("");
  const [currentTaskId, setCurrentTaskId] = useState<number | null>(null);

  const { data: tasks = [], refetch } = useQuery({
    queryKey: ["fetchCalendarTask"],
    queryFn: async () => {
      const response = await getAssignedTasks();
      return response.data || [];
    },
  });

  const onDateSelect = (date: Dayjs) => {
    setSelectedDate(date);
    setModalVisible(true);
  };

  const onTaskAction = async (vulId: number, action: "accept" | "reject") => {
    if (action === "accept") {
      try {
        await acceptVulnerabilities({
          vulId,
          reason: "I accept that",
        });
        // console.log(response);
        toast.success("accept task success !");
        setModalVisible(true);
        refetch();
        setTriggerUpdateTask((prev) => !prev);
      } catch (error) {
        toast.error("accept task fail !");
      }
    } else if (action === "reject") {
      setCurrentTaskId(vulId);
      setRejectReasonVisible(true);
    }
  };

  const handleReject = async () => {
    if (currentTaskId && rejectReason) {
      try {
        await rejectVulnerabilities({
          vulId: currentTaskId,
          reason: rejectReason,
        });
        // console.log(response);
        toast.success("reject task success !");
        setRejectReasonVisible(false);
        setModalVisible(true);
        refetch();
      } catch (error) {
        toast.error("reject task fail !");
      }
    }
  };

  const renderTasks = (date: Dayjs) => {
    const dateTasks = tasks.filter((task: any) =>
      dayjs(task.assignedAt).isSame(date, "day")
    );

    return dateTasks.map((task: any) => (
      <Tag
        key={task.taskId}
        color={task.vulnerability.severity === "Medium" ? "orange" : "blue"}
      >
        {task.vulnerability.description}
      </Tag>
    ));
  };

  return (
    <div style={{ padding: 24 }}>
      {selectedDate && (
        <Alert
          message="Selected Date"
          description={`You are viewing tasks for ${selectedDate.format(
            "YYYY-MM-DD"
          )}.`}
          type="info"
          style={{ textAlign: "start" }}
        />
      )}

      <div style={{ zIndex: 0 }}>
        <Calendar
          dateCellRender={(date) => renderTasks(date)}
          onSelect={onDateSelect}
        />
      </div>

      <Modal
        title={`Tasks on ${selectedDate?.format("YYYY-MM-DD")}`}
        visible={modalVisible}
        footer={null}
        onCancel={() => setModalVisible(false)}
        centered
      >
        {tasks?.filter((task: any) =>
            dayjs(task.assignedAt).isSame(selectedDate, "day")
          )
          .map((task: any) => (
            <Card
              key={task.taskId}
              title={
                <div>
                  <Text strong>{task.vulnerability.description}</Text>
                  <Tag
                    color={
                      task.vulnerability.severity === "Medium"
                        ? "orange"
                        : "blue"
                    }
                    style={{ marginLeft: 8 }}
                  >
                    {task.vulnerability.severity}
                  </Tag>
                </div>
              }
              style={{ marginBottom: 16 }}
            >
              <p>
                <b>Project:</b> {task.vulnerability.project.name}
              </p>
              <p>
                <b>URL:</b>{" "}
                <a
                  href={task.vulnerability.url}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  {task.vulnerability.url}
                </a>
              </p>
              <p>
                <b>Due Date:</b> {dayjs(task.dueDate).format("YYYY-MM-DD")}
              </p>

              <Space>
                <Button
                  type="primary"
                  onClick={() => onTaskAction(task.vulnerability.id, "accept")}
                >
                  Accept
                </Button>
                <Button
                  danger
                  onClick={() => onTaskAction(task.vulnerability.id, "reject")}
                >
                  Reject
                </Button>
              </Space>
            </Card>
          ))}
      </Modal>

      <Modal
        title="Reject Task"
        visible={rejectReasonVisible}
        onOk={handleReject}
        onCancel={() => {
          setRejectReasonVisible(false);
          setRejectReason("");
        }}
        centered
      >
        <p>Please provide a reason for rejecting this task:</p>
        <Input.TextArea
          value={rejectReason}
          onChange={(e) => setRejectReason(e.target.value)}
          rows={4}
        />
      </Modal>
    </div>
  );
};