import { useQuery } from "@tanstack/react-query";
import { useState } from "react";
import {
  getAcceptedAssignedTasks,
  TAssignedTasksData,
  updateTaskStatus,
} from "../../services/pentester-api";
import Loading from "../Loading";
import StatusStyle from "../StatusStyle";
import { Modal } from "antd";
import UpdateTaskModal from "./UpdateTaskModal";
import { toast } from "sonner";

export default function TaskTable({triggerUpdateTask}: {triggerUpdateTask: boolean}) {
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const [isShowVulModal, setIsShowVulModal] = useState(false);
  const [selectedInfoTask, setSelectedInfoTask] =
    useState<TAssignedTasksData>();
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [selectedTaskId, setSelectedTaskId] = useState<number | null>(null);

  const handleUpdate = async (status: string, reason?: string) => {
    // console.log("Task Updated:", { taskId: selectedTaskId, status, reason });
    if (selectedTaskId && status && reason) {
      const statusId = status === 'complete' ? 5 : status === 'fail' ? 13 : undefined;
      if (statusId) {
        await updateTaskStatus({ taskId: selectedTaskId, statusId: statusId, reason: reason });
        refetch();
        toast.success("Update task status success !");
      }
    }
  };
  const { data, error, isLoading, refetch } = useQuery({
    queryKey: ["fetchTableTask", triggerUpdateTask],
    queryFn: async () => {
      const response = await getAcceptedAssignedTasks();
      return response;
    },
  });

  return (
    <div className="relative overflow-x-auto sm:rounded-lg cursor-default">
      <div className="flex items-center justify-between flex-col md:flex-row flex-wrap space-y-4 md:space-y-0 py-4 bg-white">
        <div className="relative">
          <button
            id="dropdownActionButton"
            onClick={() => setDropdownOpen(!dropdownOpen)}
            className="inline-flex items-center text-gray-500 bg-white border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-100 font-medium rounded-lg text-sm px-3 py-1.5"
            type="button"
          >
            <span className="sr-only">Action button</span>
            Filter
            <svg
              className="w-2.5 h-2.5 ms-2.5"
              aria-hidden="true"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 10 6"
            >
              <path
                stroke="currentColor"
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M1 1l4 4 4-4"
              />
            </svg>
          </button>
          {/* Dropdown menu */}
          <div
            id="dropdownAction"
            className={`${
              dropdownOpen ? "" : "hidden"
            } absolute z-10 bg-white divide-y divide-gray-100 rounded-lg shadow w-44`}
          >
            <ul
              className="py-1 text-sm text-gray-700"
              aria-labelledby="dropdownActionButton"
            >
              <li>
                <a href="#" className="block px-4 py-2 hover:bg-gray-100">
                  Reward
                </a>
              </li>
              <li>
                <a href="#" className="block px-4 py-2 hover:bg-gray-100">
                  Promote
                </a>
              </li>
              <li>
                <a href="#" className="block px-4 py-2 hover:bg-gray-100">
                  Activate account
                </a>
              </li>
            </ul>
            <div className="py-1">
              <a
                href="#"
                className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
              >
                Delete User
              </a>
            </div>
          </div>
        </div>
        <label htmlFor="table-search" className="sr-only">
          Search
        </label>
        <div className="relative">
          <div className="absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none">
            <svg
              className="w-4 h-4 text-gray-500"
              aria-hidden="true"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 20 20"
            >
              <path
                stroke="currentColor"
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M19 19l-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"
              />
            </svg>
          </div>
          <input
            type="text"
            id="table-search-users"
            className="block py-2 ps-10 text-sm text-gray-900 border border-gray-300 rounded-lg w-80 bg-gray-50 focus:ring-blue-500 focus:border-blue-500"
            placeholder="Search users by name"
          />
        </div>
      </div>
      <table className="w-full text-sm text-left text-gray-500 mt-4">
        <thead className="text-xs text-gray-700 uppercase bg-gray-50">
          <tr>
            <th scope="col" className="px-6 py-3">
              ID
            </th>
            <th scope="col" className="px-6 py-3">
              Vulnerability
            </th>
            <th scope="col" className="px-6 py-3">
              Assign At
            </th>
            <th scope="col" className="px-6 py-3">
              Due Date
            </th>
            <th scope="col" className="px-6 py-3">
              Task Status
            </th>
            <th scope="col" className="px-6 py-3">
              Action
            </th>
          </tr>
        </thead>
        <tbody>
          {isLoading && (
            <tr>
              <td colSpan={6}>
                <div className="flex items-center justify-center h-40">
                  <Loading />
                </div>
              </td>
            </tr>
          )}
          {error && <div>Error loading task</div>}
          {data?.data ? (
            data.data.map((item) => (
              <tr className="bg-white border-b hover:bg-gray-50">
                <td className="px-6 py-4">{item.taskId}</td>
                <td
                  className="px-6 py-4 text-blue-400 cursor-pointer"
                  onClick={() => {
                    setSelectedInfoTask(item);
                    setIsShowVulModal(true);
                  }}
                >
                  {item.vulnerability.description}
                </td>
                <td className="px-6 py-4">
                  {" "}
                  {new Date(item.assignedAt).toLocaleDateString("en-GB", {
                    day: "2-digit",
                    month: "2-digit",
                    year: "numeric",
                  })}
                </td>
                <td className="px-6 py-4">
                  {" "}
                  {new Date(item.dueDate).toLocaleDateString("en-GB", {
                    day: "2-digit",
                    month: "2-digit",
                    year: "numeric",
                  })}
                </td>
                <td className="px-6 py-4">
                  {<StatusStyle statusName={item?.taskStatus} />}
                </td>
                <td className="px-6 py-4">
                  <button
                    className="px-4 py-2 text-white rounded-lg shadow-md bg-green-500 hover:bg-green-600 focus:ring-2 focus:ring-green-500"
                    onClick={() => {
                      setSelectedTaskId(item.taskId);
                      setIsModalVisible(true);
                    }}
                  >
                    Update
                  </button>
                </td>
              </tr>
            ))
          ) : (
            <div>No tasks available</div>
          )}
        </tbody>
      </table>
      <Modal
        visible={isShowVulModal}
        footer={null}
        onCancel={() => setIsShowVulModal(false)}
        centered
        style={{ padding: "10px" }}
      >
        {selectedInfoTask ? (
          <div>
            <h1 className="text-start font-semibold text-xl">
              Task Information
            </h1>
            <p>
              <strong>Task ID:</strong> {selectedInfoTask.taskId}
            </p>
            <p>
              <strong>Assigned At:</strong>{" "}
              {new Date(selectedInfoTask.assignedAt).toLocaleDateString(
                "en-GB"
              )}
            </p>
            <p>
              <strong>Due Date:</strong>{" "}
              {new Date(selectedInfoTask.dueDate).toLocaleDateString("en-GB")}
            </p>
            <p>
              <strong>Task Status:</strong> {selectedInfoTask.taskStatus}
            </p>
            <hr className="my-2" />
            <h2 className="text-lg font-semibold">Vulnerability Details</h2>
            <p>
              <strong>Vulnerability ID:</strong>{" "}
              {selectedInfoTask.vulnerability.id}
            </p>
            <p>
              <strong>Description:</strong>{" "}
              {selectedInfoTask.vulnerability.description}
            </p>
            <p>
              <strong>Severity:</strong>{" "}
              {selectedInfoTask.vulnerability.severity}
            </p>
            <p>
              <strong>URL:</strong>{" "}
              <a
                href={selectedInfoTask.vulnerability.url}
                target="_blank"
                rel="noopener noreferrer"
                className="text-blue-500"
              >
                {selectedInfoTask.vulnerability.url}
              </a>
            </p>
            <p>
              <strong>Action Reason:</strong>{" "}
              {selectedInfoTask.vulnerability.actionReason}
            </p>
            <p>
              <strong>Vulnerability Status:</strong>{" "}
              {selectedInfoTask.vulnerability.vulnerabilityStatus}
            </p>
            <hr className="my-2" />
            <h2 className="text-lg font-semibold">Project Details</h2>
            <p>
              <strong>Project ID:</strong>{" "}
              {selectedInfoTask.vulnerability.project.id}
            </p>
            <p>
              <strong>Project Name:</strong>{" "}
              {selectedInfoTask.vulnerability.project.name}
            </p>
            <p>
              <strong>Project Status ID:</strong>{" "}
              {selectedInfoTask.vulnerability.project.statusId}
            </p>
          </div>
        ) : (
          <p>No details available.</p>
        )}
      </Modal>
      <UpdateTaskModal
        visible={isModalVisible}
        onClose={() => setIsModalVisible(false)}
        onUpdate={handleUpdate}
      />
    </div>
  );
}
